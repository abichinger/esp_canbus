canbus:
  - platform: esp32_can
    id: cbus
    tx_pin: ${can_tx_pin} # GPIO22 #GPIO5
    rx_pin: ${can_rx_pin} # GPIO21 #GPIO4
    can_id: ${can_can_id} # 8
    bit_rate: 50kbps # real rate of hoval canbus is 0.5 kbps. Esphome with Esp32 cannot run under 50kbps
    on_frame:
    - can_id: ${hoval_homevent_canID} #0x1FD047FF #// Set filter to accept only the frame with identifier 1FD047FF (hoval homevent)
      can_id_mask: 0x1FFFFFFF #// 0x1FFFFFFF, which means that all bits of the received CAN ID are compared to the corresponding bits of 0x1FD047FF. Since all bits are set to 1 in can_id_mask, the received frame is accepted only if its CAN ID matches 0x1FD047FF exactly
    # - can_id: 0x1f ## works, but must process all frames and cpu is heating.
      # can_id_mask: 0x0000001f
      use_extended_id: true
      then:
      - lambda: |-
        
            //we want only response frame
            //RESPONSE = 0x42
            //GET_REQUEST = 0x40
            //SET_REQUEST = 0x46
            //can0  1FD047FF   [8]  01 42 32 00 0C 06 00 00
            //operation is at x[1]
            
            if(x[1] == 0x42) { // response frame
           
                uint32_t addr = x[5] + (x[4] << 8);
                
                if(x.size() == 7) { //if(x.size() > 6) {

                    uint8_t tmpU8 = (uint8_t)x[6]; 
                    
                    //debug : dump value
                        switch(addr) {
                        
                            //Humidity set value
                            //case 40687:
                            //    id(HV_50_0_40687).publish_state(tmpU8);
                            //    ESP_LOGI("canbus", "Humidity set value : Response Hex8: %x %x %x %x %x %x %x %x", int(x[0]), int(x[1]), int(x[2]), int(x[3]), int(x[4]), int(x[5]), int(x[6]), int(x[7])); 
                           //Humidity set value : Response Hex8: 1 42 32 0 9e ef 33 78
                            //   break;
                                
                            //CO2 extract air
                            //case 37606:
                            //    ESP_LOGI("canbus", "CO2 extract air : Response Hex8: %x %x %x %x %x %x %x %x", int(x[0]), int(x[1]), int(x[2]), int(x[3]), int(x[4]), int(x[5]), int(x[6]), int(x[7])); 
                             //   break;
                                
                            //input voltage ?
                            //case 00001:
                             //   ESP_LOGI("canbus", "input voltage: Response Hex8: %x %x %x %x %x %x %x %x", int(x[0]), int(x[1]), int(x[2]), int(x[3]), int(x[4]), int(x[5]), int(x[6]), int(x[7])); 
                             //   break;


                         } //end switch debug
                            
                        
                    
                    // if value > 0 then update
                    if (std::abs(tmpU8) > 1e-9){  //> zero
                        
                        switch(addr) {
                        
                                //Op. choice ventilation
                                case 40650:
                                    id(HV_50_0_40650).publish_state(tmpU8); 
                                    break;

                                //Normal ventilation modulation
                                case 40651:
                                    id(HV_50_0_40651).publish_state(tmpU8);
                                    break;
                            
                                //Eco ventilation modulation
                                case 40686:
                                    id(HV_50_0_40686).publish_state(tmpU8);
                                    break;
                            
                                //Ventilation modulation
                                case 38606:
                                    id(HV_50_0_38606).publish_state(tmpU8);
                                    break;
                            
                                //Humidity set value
                                case 40687:
                                    id(HV_50_0_40687).publish_state(tmpU8);
                                    //ESP_LOGI("canbus", "Humidity set value : Response Hex8: %x %x %x %x %x %x %x %x", int(x[0]), int(x[1]), int(x[2]), int(x[3]), int(x[4]), int(x[5]), int(x[6]), int(x[7])); 
                                    //ESP_LOGI("canbus", "Humidity set value  : Response Hex16: %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x", int(x[0]), int(x[1]), int(x[2]), int(x[3]), int(x[4]), int(x[5]), int(x[6]), int(x[7]) ,int(x[8]), int(x[9]), int(x[10]), int(x[11]), int(x[12]), int(x[13]), int(x[14]), int(x[15]));
                                      
                                    break;
                            
                                //Humidity extract air
                                case 37600:
                                    id(HV_50_0_37600).publish_state(tmpU8);
                                    break;
                            
                                //VOC extract air
                                case 37608:
                                    //id(HV_50_0_37608).publish_state(tmpU8); //disabled
                                    break;
                            
                                //VOC outdoor air
                                case 37611:  
                                    //id(HV_50_0_37611).publish_state(tmpU8); //disabled
                                    break;
                            
                                //Status vent. regulation
                                case 39652:
                                    id(HV_50_0_39652).publish_state(tmpU8);
                                    break;
                            
                                //Fan exhaust air set
                                case 38600:
                                    //id(HV_50_0_38600).publish_state(tmpU8); //disabled
                                    break;
                            
                                 //Active errors
                                case 29042:
                                    //id(HV_0_0_29042).publish_state(tmpU8); //disabled
                                    break;
                            
                                case 29043:
                                    //id(HV_0_0_29043).publish_state(tmpU8); //disabled
                                    break;
                            
                                case 29044:
                                    //id(HV_0_0_29044).publish_state(tmpU8); //disabled
                                   break;
                            
                                case 29045:
                                    //id(HV_0_0_29045).publish_state(tmpU8); //disabled
                                    break;
                            
                                case 29046:
                                    //id(HV_0_0_29046).publish_state(tmpU8); //disabled
                                    break;
                                 
                                //default: //case else
                                //      //debug addresses received
                                //      ESP_LOGI("canbus", "unknown canbus addr received : %i", addr);
                                     ESP_LOGI("canbus", "canbus addr 0 : Response Hex8: %x %x %x %x %x %x %x %x", int(x[0]), int(x[1]), int(x[2]), int(x[3]), int(x[4]), int(x[5]), int(x[6]), int(x[7])); 
                                //      ESP_LOGI("canbus", "unknown canbus  : Response Hex16: %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x", int(x[0]), int(x[1]), int(x[2]), int(x[3]), int(x[4]), int(x[5]), int(x[6]), int(x[7]) ,int(x[8]), int(x[9]), int(x[10]), int(x[11]), int(x[12]), int(x[13]), int(x[14]), int(x[15]));
                                      
                                

                            } //end switch case
                         } //end if tmpU8 > 0  
                    } //end if x.size() >6                         

                    //response size max 8
                    if(x.size() == 8) {    
                                int16_t tmpS16 = (int16_t)(x[6] << 8) + x[7]; 

                                if (std::abs(tmpS16) > 1e-9){ //> zero
                                
                                    switch(addr) {
                                    
                                        //Outside air temp.
                                        case 0: 
                                            if(tmpS16 == 106 || tmpS16 <0) {break;}  // prevent 10.6° and -3276.8 °C false temperature, probably another value since addr 0 is not unique
                                            id(HV_50_0_0).publish_state(tmpS16);
                                            break;
                                            
                                        //Extract air temp.
                                        case 37602: 
                                            id(HV_50_0_37602).publish_state(tmpS16);
                                            break;
                                            
                                            //default: //case else
                                            //      //debug addresses received
                                            //      ESP_LOGI("canbus", "unknown canbus  : Response Hex16: %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x", int(x[0]), int(x[1]), int(x[2]), int(x[3]), int(x[4]), int(x[5]), int(x[6]), int(x[7]) ,int(x[8]), int(x[9]), int(x[10]), int(x[11]), int(x[12]), int(x[13]), int(x[14]), int(x[15]));
                                                  
                                            
                                            
                                    } //end switch
                                } //end if tmpS16> 0
                        } //end if x.size() == 8
                        
                    //response size max 8 = ?
                    //if(x.size() > 8) {    
                    //            //int16_t tmpS16 = (int16_t)(x[6] << 8) + (x[7] << 8) + x[8] ; 
                    //            ESP_LOGI("canbus", "abnormal canbus  : Response Hex16: %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x", int(x[0]), int(x[1]), int(x[2]), int(x[3]), int(x[4]), int(x[5]), int(x[6]), int(x[7]) ,int(x[8]), int(x[9]), int(x[10]), int(x[11]), int(x[12]), int(x[13]), int(x[14]), int(x[15]));
                    //} //end if x.size() > 8
                    
            } //end if(x[1] == 0x42) { // response frame

    ######### debug ###########
    #### CANDUMP : to debug only
    # - can_id: 0  # listen to all messages
      # can_id_mask: 0
      # use_extended_id: true
      # then:
      # - lambda: |-
            # ESP_LOGI("candump", "%x : %x %x %x %x %x %x %x %x", can_id, int(x[0]), int(x[1]), int(x[2]), int(x[3]), int(x[4]), int(x[5]), int(x[6]), int(x[7])); //1FD047FF   [8]  01 42 32 00 92 E2 00 FF
    
    #### Find can_id 
    # - can_id: 0  # listen to all messages
      # can_id_mask: 0
      # use_extended_id: true
      # then:
      # - lambda: |-
            # if(x[1] == 0x42) { // response frame
                # ESP_LOGI("can_id_find", "Response frame : hoval_homevent_canID is probably : %x", can_id);
            # }else if(x[1] == 0x40) { // request frame
                # ESP_LOGI("can_id_find", "Request frame : hoval_toptronic_canID is probably : %x", can_id);
            # }